//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SchoolOO.DAO
{
    public partial class Course
    {
        #region Primitive Properties
    
        public virtual int CourseID
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual int Credits
        {
            get;
            set;
        }
    
        public virtual int DepartmentID
        {
            get { return _departmentID; }
            set
            {
                if (_departmentID != value)
                {
                    if (Department != null && Department.DepartmentID != value)
                    {
                        Department = null;
                    }
                    _departmentID = value;
                }
            }
        }
        private int _departmentID;

        #endregion
        #region Navigation Properties
    
        public virtual Department Department
        {
            get { return _department; }
            set
            {
                if (!ReferenceEquals(_department, value))
                {
                    var previousValue = _department;
                    _department = value;
                    FixupDepartment(previousValue);
                }
            }
        }
        private Department _department;
    
        public virtual OnlineCourse OnlineCourse
        {
            get { return _onlineCourse; }
            set
            {
                if (!ReferenceEquals(_onlineCourse, value))
                {
                    var previousValue = _onlineCourse;
                    _onlineCourse = value;
                    FixupOnlineCourse(previousValue);
                }
            }
        }
        private OnlineCourse _onlineCourse;
    
        public virtual OnsiteCourse OnsiteCourse
        {
            get { return _onsiteCourse; }
            set
            {
                if (!ReferenceEquals(_onsiteCourse, value))
                {
                    var previousValue = _onsiteCourse;
                    _onsiteCourse = value;
                    FixupOnsiteCourse(previousValue);
                }
            }
        }
        private OnsiteCourse _onsiteCourse;
    
        public virtual ICollection<StudentGrade> StudentGrades
        {
            get
            {
                if (_studentGrades == null)
                {
                    var newCollection = new FixupCollection<StudentGrade>();
                    newCollection.CollectionChanged += FixupStudentGrades;
                    _studentGrades = newCollection;
                }
                return _studentGrades;
            }
            set
            {
                if (!ReferenceEquals(_studentGrades, value))
                {
                    var previousValue = _studentGrades as FixupCollection<StudentGrade>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStudentGrades;
                    }
                    _studentGrades = value;
                    var newValue = value as FixupCollection<StudentGrade>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStudentGrades;
                    }
                }
            }
        }
        private ICollection<StudentGrade> _studentGrades;
    
        public virtual ICollection<Person> People
        {
            get
            {
                if (_people == null)
                {
                    var newCollection = new FixupCollection<Person>();
                    newCollection.CollectionChanged += FixupPeople;
                    _people = newCollection;
                }
                return _people;
            }
            set
            {
                if (!ReferenceEquals(_people, value))
                {
                    var previousValue = _people as FixupCollection<Person>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPeople;
                    }
                    _people = value;
                    var newValue = value as FixupCollection<Person>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPeople;
                    }
                }
            }
        }
        private ICollection<Person> _people;

        #endregion
        #region Association Fixup
    
        private void FixupDepartment(Department previousValue)
        {
            if (previousValue != null && previousValue.Courses.Contains(this))
            {
                previousValue.Courses.Remove(this);
            }
    
            if (Department != null)
            {
                if (!Department.Courses.Contains(this))
                {
                    Department.Courses.Add(this);
                }
                if (DepartmentID != Department.DepartmentID)
                {
                    DepartmentID = Department.DepartmentID;
                }
            }
        }
    
        private void FixupOnlineCourse(OnlineCourse previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Course, this))
            {
                previousValue.Course = null;
            }
    
            if (OnlineCourse != null)
            {
                OnlineCourse.Course = this;
            }
        }
    
        private void FixupOnsiteCourse(OnsiteCourse previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Course, this))
            {
                previousValue.Course = null;
            }
    
            if (OnsiteCourse != null)
            {
                OnsiteCourse.Course = this;
            }
        }
    
        private void FixupStudentGrades(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StudentGrade item in e.NewItems)
                {
                    item.Course = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StudentGrade item in e.OldItems)
                {
                    if (ReferenceEquals(item.Course, this))
                    {
                        item.Course = null;
                    }
                }
            }
        }
    
        private void FixupPeople(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Person item in e.NewItems)
                {
                    if (!item.Courses.Contains(this))
                    {
                        item.Courses.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Person item in e.OldItems)
                {
                    if (item.Courses.Contains(this))
                    {
                        item.Courses.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
