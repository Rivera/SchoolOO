//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SchoolOO.DAO
{
    public partial class Person
    {
        #region Primitive Properties
    
        public virtual int PersonID
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> HireDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> EnrollmentDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual OfficeAssignment OfficeAssignment
        {
            get { return _officeAssignment; }
            set
            {
                if (!ReferenceEquals(_officeAssignment, value))
                {
                    var previousValue = _officeAssignment;
                    _officeAssignment = value;
                    FixupOfficeAssignment(previousValue);
                }
            }
        }
        private OfficeAssignment _officeAssignment;
    
        public virtual ICollection<StudentGrade> StudentGrades
        {
            get
            {
                if (_studentGrades == null)
                {
                    var newCollection = new FixupCollection<StudentGrade>();
                    newCollection.CollectionChanged += FixupStudentGrades;
                    _studentGrades = newCollection;
                }
                return _studentGrades;
            }
            set
            {
                if (!ReferenceEquals(_studentGrades, value))
                {
                    var previousValue = _studentGrades as FixupCollection<StudentGrade>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStudentGrades;
                    }
                    _studentGrades = value;
                    var newValue = value as FixupCollection<StudentGrade>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStudentGrades;
                    }
                }
            }
        }
        private ICollection<StudentGrade> _studentGrades;
    
        public virtual ICollection<Course> Courses
        {
            get
            {
                if (_courses == null)
                {
                    var newCollection = new FixupCollection<Course>();
                    newCollection.CollectionChanged += FixupCourses;
                    _courses = newCollection;
                }
                return _courses;
            }
            set
            {
                if (!ReferenceEquals(_courses, value))
                {
                    var previousValue = _courses as FixupCollection<Course>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCourses;
                    }
                    _courses = value;
                    var newValue = value as FixupCollection<Course>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCourses;
                    }
                }
            }
        }
        private ICollection<Course> _courses;

        #endregion
        #region Association Fixup
    
        private void FixupOfficeAssignment(OfficeAssignment previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Person, this))
            {
                previousValue.Person = null;
            }
    
            if (OfficeAssignment != null)
            {
                OfficeAssignment.Person = this;
            }
        }
    
        private void FixupStudentGrades(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StudentGrade item in e.NewItems)
                {
                    item.Person = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StudentGrade item in e.OldItems)
                {
                    if (ReferenceEquals(item.Person, this))
                    {
                        item.Person = null;
                    }
                }
            }
        }
    
        private void FixupCourses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Course item in e.NewItems)
                {
                    if (!item.People.Contains(this))
                    {
                        item.People.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Course item in e.OldItems)
                {
                    if (item.People.Contains(this))
                    {
                        item.People.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
